
## 4.2. Installation und Konfiguration von Watchtower
## Die Installation von Watchtower erfolgt √ºber Docker. Sie k√∂nnen den WatchtowerContainer mit dem folgenden Befehl installieren:

##    ----------> gehe auf Version 3.4 meine Empfehlung 

Version: '3'
services:
watchtower:
image: containrrr/watchtower
volumes:
- /var/run/docker.sock:/var/run/docker.sock
Command: --schedule "0 0 4 * * *"


## 4.6 Watchtower-Stack-Setup in Portainer Business
## Weg 1: Erstellung und Start eines Watchtower-Stacks direkt vom Node-1
## 1. Erstellen Sie eine Stack-Konfigurationsdatei f√ºr Watchtower       ----------> gehe auf Version 3.4 meine Empfehlung 


Version: '3'                                                
services:
watchtower:
image: containrrr/watchtower
volumes:
- /var/run/docker.sock:/var/run/docker.sock
Command: --schedule "0 0 4 * * *"






## 3. Starten Sie den Watchtower-Stack
## F√ºhren Sie nun den folgenden Befehl aus, um den Watchtower-Stack zu starten:

docker stack deploy -c watchtower-stack.yml watchtower





## 4.7 Meine Konfigurationen und 2 M√∂glichkeiten
## 1.0 M√∂glichkeit 1: Standard-Konfiguration
## 1.1 Docker Stack-Konfiguration            ----------> gehe auf Version 3.4 meine Empfehlung 


version: '3.1'
services:
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *"
    deploy:
      mode: global
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_POLL_INTERVAL=259200
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"
  app-monitored-by-watchtower:
    image: myapps/monitored-by-watchtower
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"

# In dieser Konfiguration:
# - Watchtower wird alle 3 Tage (259200 Sekunden) nach Updates suchen.
# - Es l√§uft im globalen Modus, was bedeutet, dass es auf allen Nodes in Ihrem Docker Swarm l√§uft.
# - Es wird auch gestoppte Container einschlie√üen und nach dem Aktualisieren von Containern alte Docker-Images bereinigen.
# - Watchtower wird nur die Container √ºberwachen und aktualisieren, die mit dem spezifischen Label "com.centurylinklabs.watchtower.scope=myscope" gekennzeichnet sind. 
#   In diesem Beispiel ist das der app-monitored-by-watchtower-Dienst.
# Sie k√∂nnen diese Konfiguration in das "Web editor" Feld in Portainer einf√ºgen, wenn Sie einen neuen Stack erstellen. 
# Geben Sie dem Stack einen Namen, zum Beispiel "watchtower", und klicken Sie dann auf "Deploy the Stack".






## 2.1 Docker Stack-Konfiguration        ----------> gehe auf Version 3.4 meine Empfehlung 


version: '3.2'
services:
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 */3 * * *" --cleanup --include-stopped
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
  app-monitored-by-watchtower:
    image: myapps/monitored-by-watchtower
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"
  watchtower-scope:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 */3 * * *" --scope myscope 
             --cleanup --include-stopped
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"


# In dieser Konfiguration haben wir zwei Watchtower-Services definiert: watchtower, der alle Container √ºberwacht, 
# und watchtower-scope, der nur die Container mit dem Label com.centurylinklabs.watchtower.scope=myscope √ºberwacht. 
# Beide Services suchen alle drei Tage um 4 Uhr morgens nach Updates.

# Die Konfiguration enth√§lt auch einen Service app-monitored-by-watchtower, der ein Beispiel f√ºr einen Service ist, 
# der von watchtower-scope √ºberwacht wird. Sie k√∂nnen diesen Teil der Konfiguration anpassen, um Ihre eigenen 
# zu √ºberwachenden Services zu definieren.

# Bitte beachten Sie, dass Sie f√ºr den Service app-monitored-by-watchtower das Bild myapps/monitored-by-watchtower 
# durch das tats√§chliche Docker-Bild ersetzen m√ºssen, das Sie verwenden m√∂chten.

# Hinweis: Die obige Konfiguration setzt voraus, dass Sie eine Docker Swarm-Umgebung verwenden und auf einem 
# Manager-Knoten arbeiten. Wenn Sie eine Einzelcontainer-Umgebung verwenden, m√ºssen Sie die deploy-Abschnitte 
# entfernen und die docker-compose up Befehl anstelle von docker stack deploy verwenden.

# Bitte beachten Sie auch, dass diese Konfiguration Watchtower so konfiguriert, dass er gestoppte Container 
# einschlie√üt und alte Docker-Images bereinigt. Wenn Sie dieses Verhalten nicht w√ºnschen, k√∂nnen Sie die 
# entsprechenden Flags und Umgebungsvariablen entfernen.



## Neue Version  ######################        ----------> gehe auf Version 3.4 meine Empfehlung 
##################  Version 3.3 #######       ----------> gehe auf Version 3.4 meine Empfehlung 



version: '3.3'
services:
  watchtower-manager:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 */3 * * *" --cleanup --include-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true

  app-monitored-by-watchtower-worker:
    image: myapps/monitored-by-watchtower
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  watchtower-scope-global:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 */3 * * *" --scope myscope --cleanup --include-stopped
    deploy:
      mode: global
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"
```


# Mit diesem Code:
# - Der Dienst `watchtower-manager` wird ausschlie√ülich auf dem Manager-Knoten ausgef√ºhrt.
# - Der Dienst `app-monitored-by-watchtower-worker` wird ausschlie√ülich auf Worker-Knoten ausgef√ºhrt. Ich habe 
#  angenommen, dass dieser Dienst kein spezielles Verhalten wie Watchtower hat, daher fehlen die Umgebungsvariablen
#  und die Kommandooptionen von Watchtower.
# - Der Dienst `watchtower-scope-global` wird auf allen Knoten ausgef√ºhrt, sowohl auf Managern als auch auf Workern. 

# Bitte beachten Sie, dass der `replicas: 1` Befehl in den Diensten `watchtower-manager` und `app-monitored-by-watchtower-worker` sicherstellt, dass nur eine Instanz des Dienstes l√§uft. Wenn Sie mehrere Instanzen eines Dienstes auf Worker-Knoten oder Managern haben m√∂chten, k√∂nnen Sie den Wert entsprechend anpassen. 

# Bitte beachten Sie auch, dass der `mode: global` Befehl im Dienst `watchtower-scope-global` sicherstellt, dass auf jedem Knoten im Swarm eine Instanz des Dienstes ausgef√ºhrt wird. 

# Diese Einstellungen gelten nur, wenn Sie Docker Swarm verwenden. Wenn Sie eine andere Orchestrierungsl√∂sung verwenden, wie z.B. Kubernetes, m√ºssen Sie die spezifischen Methoden und Befehle dieser Plattform verwenden, um die Platzierung und Replikation von Diensten zu steuern.


##################################################################################################
##################################################################################################
##################################################################################################


## Best Konfiguration f√ºr den Watchtowe Stack 

## Neue Version 
##################  Version 3.4 #########################


version: '3.4'
services:
  watchtower-manager:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 */3 * * *" --cleanup --include-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"

  app-monitored-by-watchtower-global:
    image: myapps/monitored-by-watchtower
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"
    deploy:
      mode: global

  watchtower-scope-worker:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 */3 * * *" --cleanup --include-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker 
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
    labels:
      - "com.centurylinklabs.watchtower.scope=myscope"



##################################################################################################


Diese Version hier üëáüëá funktioniert einwandfrei. Die verwenden funktioniert immer im Cluster
Achtung container wachtower startet nur wenn es was zum aktualisieren gibt. 

### Schlicht und einfache Version ##############


version: '3.5'
services:
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 */3 * * *" --cleanup --include-stopped
    deploy:
      mode: global
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_POLL_INTERVAL=259200




##################################################################################################


Das Watchtower im Gleichen Netzwerk ist wie portainer und der nginx proxy, ist das 
die Anpassung des Codes. 

## Watchtower Stack 
l√§uft aber eher als Service: 

Der von Ihnen bereitgestellte Watchtower-Stack scheint korrekt zu sein, 
erfordert jedoch einige Anpassungen, um sicherzustellen, dass er im Netzwerk gut funktioniert 
und mit dem Nginx-Proxy-Manager und Portainer kommunizieren kann. Hier ist die modifizierte Version:



#########################################


version: '3.5'
services:
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 */3 * * *" --cleanup --include-stopped
    networks:
      - mynetwork
    deploy:
      mode: global
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_POLL_INTERVAL=259200

networks:
  mynetwork:
    external: true


Achten Sie darauf, dass Sie 'mynetwork' durch den tats√§chlichen Namen des Netzwerks ersetzen, das Sie verwenden.

Zum Starten des Watchtower-Stacks f√ºhren Sie den Befehl docker stack deploy -c watchtower-stack.yml watchtower aus, 
wobei "watchtower-stack.yml" der Name der Datei ist, in der Sie diesen Stack gespeichert haben.

Wie bereits erw√§hnt, sollten Sie sicherstellen, dass alle Ihre Dienste im selben Netzwerk sind, um sicherzustellen, 
dass sie miteinander kommunizieren k√∂nnen. Achten Sie auch darauf, dass Sie den Nginx-Proxy-Manager richtig konfiguriert 
haben, um eingehende Anfragen an die richtigen Dienste weiterzuleiten.



##############################################










