
###################################################

## 9. Zwei-Faktor-Authentifizierung (2FA) – Original


# 9.3.2 Vorteile und Implementierung des OAuth2 Proxy
# Die Verwendung eines OAuth2 Proxys in einem System bringt eine Reihe von Vorteilen
# mit sich. Erstens bietet er eine zusätzliche Sicherheitsebene, indem er sicherstellt, dass
# nur authentifizierte Benutzer Zugang zu den Anwendungen haben. Zweitens ermöglicht er
# die zentrale Verwaltung der Authentifizierung, anstatt sie für jede einzelne Anwendung
# separat zu konfigurieren. Dies kann zur Vereinfachung der Verwaltung von
# Authentifizierungssystemen beitragen und sie konsistenter und sicherer machen.
# Es gibt verschiedene Möglichkeiten, wie man einen OAuth2 Proxy implementieren kann,
# beispielsweise als Stack, als Service oder als Konfigurationsdatei. Die Implementierung
# als Stack bietet Vorteile wie eine klare Struktur und Organisation, die es einfacher macht,
# den Überblick über die Dienste zu behalten. Darüber hinaus ermöglicht es eine einfache
# Skalierung und Wartung, da der gesamte Stack gleichzeitig aktualisiert oder skaliert
# werden kann, anstatt einzelne Services zu bearbeiten.
# In praktischen Anwendungen kann der OAuth2 Proxy beispielsweise mittels Docker
# Compose als Stack implementiert werden. Ein solcher Stack könnte so aussehen:


    version: '3'
      services:
        oauth2-proxy:
          image: bitnami/oauth2-proxy:latest
          environment:
            - OAUTH2_PROXY_CLIENT_ID=myclientid
            - OAUTH2_PROXY_CLIENT_SECRET=myclientsecret
          volumes:
            - ./config:/config
          ports:
            - 4180:4180





## 9.4.3 Erstellung der Konfigurationsdatei
## Die Konfigurationsdatei des OAuth2 Proxy legt verschiedene Einstellungen fest, die von
## der Proxy-Instanz verwendet werden sollen. Ein Beispiel für eine solche Datei könnte
## folgendermassen aussehen:


    http_address = "0.0.0.0:4180"
    https_address = ""
    upstreams = ["http://localhost:8080/"]
    provider = "github"
    client_id = "myclientid"
    client_secret = "myclientsecret"



# 9.5 Implementierung von 2FA in Docker Swarm Clustern
# 9.5.1. Implementierung von 2FA mit OAuth2-Proxy
# Da Docker Swarm keine native Unterstützung für 2FA bietet, kann der OAuth2-Proxy
# genutzt werden, um diese Funktion hinzuzufügen. Nach der Installation des OAuth2-
# Proxys in Docker Swarm, was durch folgenden Befehl erfolgen kann:



docker service create --name oauth2-proxy --network webproxy
-p 4180:4180 -v /path/to/oauth2:/config bitnami/oauth2-proxy:latest





# 9.6 Implementierung der 2FA in Nginx Proxy Manager
# 9.6.1 Einführung in 2FA und OAuth2
# Die Zwei-Faktor-Authentifizierung (2FA) bietet zusätzliche Sicherheit für den Zugriff auf
# den Nginx Proxy Manager. Da Nginx Proxy Manager selbst keine 2FA unterstützt,
# verwenden wir den OAuth2-Proxy14, um diese Funktion zu integrieren.
# 9.6.2 Implementierung von 2FA mit OAuth2-Proxy
# 9.6.2.1. Erstellung eines Docker Stacks für Nginx Proxy Manager & OAuth2-Proxy
# Erstellen Sie eine Docker Stack-Datei mit dem Namen «docker-compose.yml»:


    version: '3'

    services:
      nginxproxymanager:
        image: jc21/nginx-proxy-manager:latest
        volumes:
          - /path/to/your/config.json:/app/config/production.json
          - /path/to/your/data:/data
          - /path/to/your/letsencrypt:/etc/letsencrypt
        ports:
          - 80:80
          - 443:443
          - 81:81
        networks:
          - webproxy

      oauth2-proxy:
        image: quay.io/oauth2-proxy/oauth2-proxy:latest
        volumes:
          - /path/to/oauth2:/config
        command: --config=/config/oauth2_proxy.cfg
        networks:
          - webproxy

    networks:
      webproxy:
        external: true



# Bitte ersetzen Sie alle «/path/to/your/...» Pfade mit Ihren tatsächlichen Pfaden.
# 9.6.2.2. Konfiguration von OAuth2-Proxy
# Erstellen Sie eine Konfigurationsdatei für den OAuth2-Proxy namens «oauth2_proxy.cfg»
# mit folgendem Inhalt:


    http_address = "0.0.0.0:4180"
    https_address = ":443"
    redirect_url = "https://your-domain/oauth2/callback"
    provider = "your-provider"
    email_domains = [
        "your-domain"
    ]
    client_id = "your-client-id"
    client_secret = "your-client-secret"
    cookie_secret = "your-cookie-secret"









# 9.6.2.3. Implementierung von 2FA im Docker Swarm Cluster
# Nach dem Start des Docker Stacks sollten Sie den Nginx Proxy Manager so
# konfigurieren, dass der OAuth2-Proxy als Authentifizierungsproxy für Ihre geschützten
# Dienste verwendet wird.

# Weg 1 - Über die Konsole:
# Zum Starten des Docker Stacks über die Konsole navigieren Sie zu dem Verzeichnis, in
# dem sich Ihre «docker-compose.yml» befindet, und führen Sie den folgenden Befehl
# aus:

docker stack deploy -c docker-compose.yml my-stack




### von 9.5 der 3 Befehl  ### 

  docker restart oauth2-proxy




###################################################

###################################################

###################################################




## Code von der Website andere Stack Interpretation 
## https://alex.thom.ae/2019/10/20/protect-website-oauth2_proxy-traefik/ 


version: '3.7'
services:
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy
    hostname: oauth2-proxy 
    volumes:
      - "./oauth2-proxy-nginx.cfg:/oauth2-proxy.cfg"
    networks:
      oauth2-proxy: {}
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
  nginx:
    container_name: nginx
    image: nginx:1.18
    ports:
      - 80:80/tcp
    hostname: nginx
    volumes:
      - "./nginx.conf:/etc/nginx/conf.d/default.conf"
    networks:
      oauth2-proxy: {}
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
networks:
  oauth2-proxy: {}




